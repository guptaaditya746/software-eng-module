plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    
    // working with CSV files
    // https://github.com/eugenp/tutorials/tree/master/libraries-apache-commons-io
    // https://mvnrepository.com/artifact/org.apache.commons/commons-csv
    implementation 'org.apache.commons:commons-csv:1.10.0'

    // working with SQL databases
    // https://mvnrepository.com/artifact/com.h2database/h2
    implementation 'com.h2database:h2:2.2.224'

    implementation 'org.openjfx:javafx-controls:15'
    implementation 'org.openjfx:javafx-fxml:15'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.testfx:testfx-core:4.0.16-alpha'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'

        // Other dependencies
    implementation 'org.openjfx:javafx-controls:17.0.2'
    implementation 'org.openjfx:javafx-base:17.0.2'
    implementation 'org.openjfx:javafx-graphics:17.0.2'
    // Mockito dependency for mocking
    testImplementation 'org.mockito:mockito-core:3.12.4'


}

application {
    // Define the main class for the application.
    // mainClass = 'de.buw.se.AppCLI'
    mainClass = 'de.buw.se.AppGUI'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

javafx {
    version = "21.0.1"
    modules = [ 'javafx.controls' ]
}

java {
    sourceCompatibility = JavaVersion.VERSION_15
}

run {
    standardInput = System.in
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
test {
    useJUnitPlatform()
}