plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'

    // TestFX dependencies for JavaFX testing.
    testImplementation 'org.testfx:testfx-core:4.0.16-alpha'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'

    // JavaFX dependencies for the application.
    implementation 'org.openjfx:javafx-controls:21.0.1'
    implementation 'org.openjfx:javafx-swing:21.0.1'

    // Guava library.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Apache Commons CSV library.
    implementation 'org.apache.commons:commons-csv:1.10.0'

    // H2 Database.
    implementation 'com.h2database:h2:2.2.224'

    // JExcelAPI for Excel file handling.
    implementation 'net.sourceforge.jexcelapi:jxl:2.6.12'
    
    // Mockito for mocking in tests.
    testImplementation 'org.mockito:mockito-core:5.0.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.0.0'
    
    // PowerMock dependencies for mocking static methods.
    testImplementation 'org.mockito:mockito-inline:3.12.4'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
}

application {
    // Define the main class for the application.
    mainClass = 'de.buw.se.AppGUI'
    // Uncomment to use the CLI main class.
    // mainClass = 'de.buw.se.AppCLI'
}

tasks.withType(JavaCompile) {
    // Set the encoding for Java source files.
    options.encoding = 'UTF-8'
}

javafx {
    // Set the version of JavaFX to use.
    version = "21.0.1"
    // Specify the JavaFX modules required.
    modules = [ 'javafx.controls', 'javafx.swing' ]
}

java {
    // Set the Java source compatibility.
    sourceCompatibility = JavaVersion.VERSION_17
    // Set the Java target compatibility.
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    
    // Fork a new JVM for each test class to ensure isolation.
    //forkEvery = 1

    // Run tests sequentially to avoid potential issues with shared state.
   // maxParallelForks = 1

    // Show detailed test results and stack traces.
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        exceptionFormat "full"
    }
}
